// mock/mock.ts
import { ServerResponse } from "http";
import dayjs from "dayjs";
import casual from "casual";
ServerResponse.prototype.ok = function(data) {
  this.setHeader("Content-Type", "application/jsonxml; charset=utf-8");
  this.end(JSON.stringify({ code: 200, message: null, data }));
};
ServerResponse.prototype.error = function(message, code = 400, httpCode = 200) {
  this.setHeader("Content-Type", "application/jsonxml; charset=utf-8");
  this.statusCode = httpCode;
  this.end(JSON.stringify({ code, message, data: null }));
};
var date = 15;
function mock_default(config) {
  return [
    {
      url: "/api/otp",
      method: "post",
      timeout: 1e3,
      response: {
        code: 200,
        data: "010086",
        msg: ""
      }
    },
    {
      url: "/api/user",
      method: "get",
      timeout: 1e3,
      response: {
        code: 200,
        msg: ""
      }
    },
    {
      url: "/api/balance",
      method: "get",
      timeout: 1e3,
      rawResponse(req, res) {
        res.ok(casual.integer(0, 1e3));
      }
    },
    {
      url: "/api/check-in",
      method: "get",
      timeout: 1e3,
      rawResponse(req, res) {
        const firstDay = dayjs().set("date", 1);
        const data = Array.from({ length: dayjs().daysInMonth() }).fill(0).map((_, i) => ({
          date: dayjs(firstDay.add(i, "day")).format("YYYY-MM-DD HH:mm:ss"),
          status: i < date ? 0 : i === date ? 1 : 2
        }));
        res.ok({
          code: 200,
          data,
          msg: ""
        });
      }
    },
    {
      url: "/api/check-in",
      method: "post",
      timeout: 1e3,
      rawResponse(req, res) {
        date++;
        res.ok({
          code: 400,
          data: 1,
          msg: "\u8BF7\u4E0D\u8981\u91CD\u590D\u9886\u53D6"
        });
      }
    }
  ];
}
export {
  mock_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibW9jay9tb2NrLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX2luamVjdGVkX2ZpbGVuYW1lX18gPSBcIkQ6XFxcXHdvcmtzcGFjZXNcXFxcZGs4NVxcXFx3ZWJcXFxcbW9ja1xcXFxtb2NrLnRzXCI7Y29uc3QgX19pbmplY3RlZF9kaXJuYW1lX18gPSBcIkQ6XFxcXHdvcmtzcGFjZXNcXFxcZGs4NVxcXFx3ZWJcXFxcbW9ja1wiO2NvbnN0IF9faW5qZWN0ZWRfaW1wb3J0X21ldGFfdXJsX18gPSBcImZpbGU6Ly8vRDovd29ya3NwYWNlcy9kazg1L3dlYi9tb2NrL21vY2sudHNcIjtpbXBvcnQgeyBTZXJ2ZXJSZXNwb25zZSB9IGZyb20gJ2h0dHAnXHJcbmltcG9ydCB0eXBlIHsgTW9ja0NvbmZpZywgTW9ja01ldGhvZCB9IGZyb20gJ3ZpdGUtcGx1Z2luLW1vY2snXHJcbmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcydcclxuaW1wb3J0IGNhc3VhbCBmcm9tICdjYXN1YWwnXHJcblxyXG5kZWNsYXJlIG1vZHVsZSAnc3RyZWFtJyB7XHJcbiAgICBpbnRlcmZhY2UgV3JpdGFibGUge1xyXG4gICAgICAgIG9rKGRhdGE6IGFueSk6IHZvaWRcclxuICAgICAgICBlcnJvcihtZXNzYWdlOiBzdHJpbmcsIGNvZGU/OiBudW1iZXIsIGh0dHBDb2RlPzogbnVtYmVyKTogdm9pZFxyXG4gICAgfVxyXG59XHJcblxyXG5TZXJ2ZXJSZXNwb25zZS5wcm90b3R5cGUub2sgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgdGhpcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29ueG1sOyBjaGFyc2V0PXV0Zi04JylcclxuICAgIHRoaXMuZW5kKEpTT04uc3RyaW5naWZ5KHsgY29kZTogMjAwLCBtZXNzYWdlOiBudWxsLCBkYXRhOiBkYXRhIH0pKVxyXG59XHJcblxyXG5TZXJ2ZXJSZXNwb25zZS5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZTogc3RyaW5nLCBjb2RlID0gNDAwLGh0dHBDb2RlID0gMjAwKSB7XHJcbiAgICB0aGlzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb254bWw7IGNoYXJzZXQ9dXRmLTgnKVxyXG4gICAgdGhpcy5zdGF0dXNDb2RlID0gaHR0cENvZGVcclxuICAgIHRoaXMuZW5kKEpTT04uc3RyaW5naWZ5KHsgY29kZSwgIG1lc3NhZ2UsIGRhdGE6IG51bGwgfSkpXHJcbn1cclxuXHJcbmxldCBkYXRlID0gMTVcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChjb25maWc6IE1vY2tDb25maWcpOiBNb2NrTWV0aG9kW10ge1xyXG4gICAgcmV0dXJuIFtcclxuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB1cmw6ICcvYXBpL290cCcsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB0aW1lb3V0OiAxMDAwLFxyXG4gICAgICAgICAgICByZXNwb25zZToge1xyXG4gICAgICAgICAgICAgICAgY29kZTogMjAwLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogJzAxMDA4NicsXHJcbiAgICAgICAgICAgICAgICBtc2c6ICcnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB1cmw6ICcvYXBpL3VzZXInLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnLFxyXG4gICAgICAgICAgICB0aW1lb3V0OiAxMDAwLFxyXG4gICAgICAgICAgICByZXNwb25zZToge1xyXG4gICAgICAgICAgICAgICAgY29kZTogMjAwLFxyXG4gICAgICAgICAgICAgICAgbXNnOiAnJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdXJsOiAnL2FwaS9iYWxhbmNlJyxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcclxuICAgICAgICAgICAgdGltZW91dDogMTAwMCxcclxuICAgICAgICAgICAgcmF3UmVzcG9uc2UocmVxLCByZXMpIHtcclxuICAgICAgICAgICAgICAgIHJlcy5vayhjYXN1YWwuaW50ZWdlcigwLCAxMDAwKSlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHVybDogJy9hcGkvY2hlY2staW4nLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnLFxyXG4gICAgICAgICAgICB0aW1lb3V0OiAxMDAwLFxyXG4gICAgICAgICAgICByYXdSZXNwb25zZShyZXEsIHJlcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3REYXkgPSBkYXlqcygpLnNldCgnZGF0ZScsIDEpXHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IEFycmF5LmZyb20oeyBsZW5ndGg6IGRheWpzKCkuZGF5c0luTW9udGgoKSB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5maWxsKDApXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoXywgaSkgPT4gKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF5anMoZmlyc3REYXkuYWRkKGksICdkYXknKSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogaSA8IGRhdGUgPyAwIDogaSA9PT0gZGF0ZSA/IDEgOiAyLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pKVxyXG5cclxuICAgICAgICAgICAgICAgIHJlcy5vayh7XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZTogMjAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgbXNnOiAnJyxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHVybDogJy9hcGkvY2hlY2staW4nLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgICAgICAgICAgdGltZW91dDogMTAwMCxcclxuICAgICAgICAgICAgcmF3UmVzcG9uc2UocmVxLCByZXMpIHtcclxuICAgICAgICAgICAgICAgIGRhdGUrK1xyXG4gICAgICAgICAgICAgICAgcmVzLm9rKHtcclxuICAgICAgICAgICAgICAgICAgICBjb2RlOiA0MDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogMSxcclxuICAgICAgICAgICAgICAgICAgICBtc2c6ICdcdThCRjdcdTRFMERcdTg5ODFcdTkxQ0RcdTU5MERcdTk4ODZcdTUzRDYnLFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgXVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBMk4sU0FBUyxzQkFBc0I7QUFFMVAsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sWUFBWTtBQVNuQixlQUFlLFVBQVUsS0FBSyxTQUFVLE1BQU07QUFDMUMsT0FBSyxVQUFVLGdCQUFnQixvQ0FBb0M7QUFDbkUsT0FBSyxJQUFJLEtBQUssVUFBVSxFQUFFLE1BQU0sS0FBSyxTQUFTLE1BQU0sS0FBVyxDQUFDLENBQUM7QUFDckU7QUFFQSxlQUFlLFVBQVUsUUFBUSxTQUFVLFNBQWlCLE9BQU8sS0FBSSxXQUFXLEtBQUs7QUFDbkYsT0FBSyxVQUFVLGdCQUFnQixvQ0FBb0M7QUFDbkUsT0FBSyxhQUFhO0FBQ2xCLE9BQUssSUFBSSxLQUFLLFVBQVUsRUFBRSxNQUFPLFNBQVMsTUFBTSxLQUFLLENBQUMsQ0FBQztBQUMzRDtBQUVBLElBQUksT0FBTztBQUVJLFNBQVIsYUFBa0IsUUFBa0M7QUFDdkQsU0FBTztBQUFBLElBRUg7QUFBQSxNQUNJLEtBQUs7QUFBQSxNQUNMLFFBQVE7QUFBQSxNQUNSLFNBQVM7QUFBQSxNQUNULFVBQVU7QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLEtBQUs7QUFBQSxNQUNUO0FBQUEsSUFDSjtBQUFBLElBQ0E7QUFBQSxNQUNJLEtBQUs7QUFBQSxNQUNMLFFBQVE7QUFBQSxNQUNSLFNBQVM7QUFBQSxNQUNULFVBQVU7QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLEtBQUs7QUFBQSxNQUNUO0FBQUEsSUFDSjtBQUFBLElBQ0E7QUFBQSxNQUNJLEtBQUs7QUFBQSxNQUNMLFFBQVE7QUFBQSxNQUNSLFNBQVM7QUFBQSxNQUNULFlBQVksS0FBSyxLQUFLO0FBQ2xCLFlBQUksR0FBRyxPQUFPLFFBQVEsR0FBRyxHQUFJLENBQUM7QUFBQSxNQUNsQztBQUFBLElBQ0o7QUFBQSxJQUVBO0FBQUEsTUFDSSxLQUFLO0FBQUEsTUFDTCxRQUFRO0FBQUEsTUFDUixTQUFTO0FBQUEsTUFDVCxZQUFZLEtBQUssS0FBSztBQUNsQixjQUFNLFdBQVcsTUFBTSxFQUFFLElBQUksUUFBUSxDQUFDO0FBRXRDLGNBQU0sT0FBTyxNQUFNLEtBQUssRUFBRSxRQUFRLE1BQU0sRUFBRSxZQUFZLEVBQUUsQ0FBQyxFQUNwRCxLQUFLLENBQUMsRUFDTixJQUFJLENBQUMsR0FBRyxPQUFPO0FBQUEsVUFDWixNQUFNLE1BQU0sU0FBUyxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUUsT0FBTyxxQkFBcUI7QUFBQSxVQUNoRSxRQUFRLElBQUksT0FBTyxJQUFJLE1BQU0sT0FBTyxJQUFJO0FBQUEsUUFDNUMsRUFBRTtBQUVOLFlBQUksR0FBRztBQUFBLFVBQ0gsTUFBTTtBQUFBLFVBQ047QUFBQSxVQUNBLEtBQUs7QUFBQSxRQUNULENBQUM7QUFBQSxNQUNMO0FBQUEsSUFDSjtBQUFBLElBQ0E7QUFBQSxNQUNJLEtBQUs7QUFBQSxNQUNMLFFBQVE7QUFBQSxNQUNSLFNBQVM7QUFBQSxNQUNULFlBQVksS0FBSyxLQUFLO0FBQ2xCO0FBQ0EsWUFBSSxHQUFHO0FBQUEsVUFDSCxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixLQUFLO0FBQUEsUUFDVCxDQUFDO0FBQUEsTUFDTDtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
