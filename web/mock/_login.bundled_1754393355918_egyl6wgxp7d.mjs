// mock/login.ts
var token = "";
var f = () => {
  token = Math.random().toString(32);
};
setInterval(f, 1e4);
function login_default(config) {
  return [
    {
      url: "/api/login",
      method: "post",
      timeout: 300,
      async rawResponse(req, res) {
        f();
        res.ok({ token });
      }
    },
    {
      url: "/api/protected",
      method: "get",
      timeout: 300,
      async rawResponse(req, res) {
        const t = req.headers.authorization;
        if (t === token) {
          res.ok("\u53D7\u4FDD\u62A4\u5185\u5BB9");
        } else {
          res.error("\u767B\u5F55\u5931\u6548", 666, 200);
        }
      }
    },
    {
      url: "/api/refresh",
      method: "post",
      timeout: 300,
      async rawResponse(req, res) {
        res.error("\u767B\u5F55\u5931\u6548", 666, 200);
      }
    }
  ];
}
export {
  login_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibW9jay9sb2dpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJEOlxcXFx3b3Jrc3BhY2VzXFxcXGRrODVcXFxcd2ViXFxcXG1vY2tcXFxcbG9naW4udHNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiRDpcXFxcd29ya3NwYWNlc1xcXFxkazg1XFxcXHdlYlxcXFxtb2NrXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9EOi93b3Jrc3BhY2VzL2RrODUvd2ViL21vY2svbG9naW4udHNcIjtpbXBvcnQgdHlwZSB7IE1vY2tDb25maWcsIE1vY2tNZXRob2QgfSBmcm9tICd2aXRlLXBsdWdpbi1tb2NrJ1xyXG5cclxubGV0IHRva2VuID0gJydcclxuY29uc3QgZiA9ICgpID0+IHtcclxuICAgIHRva2VuID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzMilcclxufVxyXG5zZXRJbnRlcnZhbChmLCAxMDAwMClcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChjb25maWc6IE1vY2tDb25maWcpOiBNb2NrTWV0aG9kW10ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHVybDogJy9hcGkvbG9naW4nLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgICAgICAgICAgdGltZW91dDogMzAwLFxyXG4gICAgICAgICAgICBhc3luYyByYXdSZXNwb25zZShyZXEsIHJlcykge1xyXG4gICAgICAgICAgICAgICAgZigpXHJcbiAgICAgICAgICAgICAgICByZXMub2soeyB0b2tlbiB9KVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB1cmw6ICcvYXBpL3Byb3RlY3RlZCcsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcsXHJcbiAgICAgICAgICAgIHRpbWVvdXQ6IDMwMCxcclxuICAgICAgICAgICAgYXN5bmMgcmF3UmVzcG9uc2UocmVxLCByZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uXHJcbiAgICAgICAgICAgICAgICBpZiAodCA9PT0gdG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMub2soJ1x1NTNEN1x1NEZERFx1NjJBNFx1NTE4NVx1NUJCOScpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5lcnJvcignXHU3NjdCXHU1RjU1XHU1OTMxXHU2NTQ4JywgNjY2LCAyMDApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHVybDogJy9hcGkvcmVmcmVzaCcsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB0aW1lb3V0OiAzMDAsXHJcbiAgICAgICAgICAgIGFzeW5jIHJhd1Jlc3BvbnNlKHJlcSwgcmVzKSB7XHJcbiAgICAgICAgICAgICAgICByZXMuZXJyb3IoJ1x1NzY3Qlx1NUY1NVx1NTkzMVx1NjU0OCcsIDY2NiwgMjAwKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICBdXHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUVBLElBQUksUUFBUTtBQUNaLElBQU0sSUFBSSxNQUFNO0FBQ1osVUFBUSxLQUFLLE9BQU8sRUFBRSxTQUFTLEVBQUU7QUFDckM7QUFDQSxZQUFZLEdBQUcsR0FBSztBQUVMLFNBQVIsY0FBa0IsUUFBa0M7QUFDdkQsU0FBTztBQUFBLElBQ0g7QUFBQSxNQUNJLEtBQUs7QUFBQSxNQUNMLFFBQVE7QUFBQSxNQUNSLFNBQVM7QUFBQSxNQUNULE1BQU0sWUFBWSxLQUFLLEtBQUs7QUFDeEIsVUFBRTtBQUNGLFlBQUksR0FBRyxFQUFFLE1BQU0sQ0FBQztBQUFBLE1BQ3BCO0FBQUEsSUFDSjtBQUFBLElBQ0E7QUFBQSxNQUNJLEtBQUs7QUFBQSxNQUNMLFFBQVE7QUFBQSxNQUNSLFNBQVM7QUFBQSxNQUNULE1BQU0sWUFBWSxLQUFLLEtBQUs7QUFDeEIsY0FBTSxJQUFJLElBQUksUUFBUTtBQUN0QixZQUFJLE1BQU0sT0FBTztBQUNiLGNBQUksR0FBRyxnQ0FBTztBQUFBLFFBQ2xCLE9BQU87QUFDSCxjQUFJLE1BQU0sNEJBQVEsS0FBSyxHQUFHO0FBQUEsUUFDOUI7QUFBQSxNQUNKO0FBQUEsSUFDSjtBQUFBLElBQ0E7QUFBQSxNQUNJLEtBQUs7QUFBQSxNQUNMLFFBQVE7QUFBQSxNQUNSLFNBQVM7QUFBQSxNQUNULE1BQU0sWUFBWSxLQUFLLEtBQUs7QUFDeEIsWUFBSSxNQUFNLDRCQUFRLEtBQUssR0FBRztBQUFBLE1BQzlCO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K
